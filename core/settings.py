"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import environ
from celery.schedules import crontab
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
APPS_DIR = BASE_DIR.joinpath("apps")

env = environ.Env()
env.read_env(BASE_DIR.joinpath(".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = env.str("DJANGO__SECRET_KEY")

# Reading the API key
GOOGLE_API_KEY = env("GOOGLE_API_KEY", default=None)

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = env.bool("DJANGO__DEBUG", False)

ALLOWED_HOSTS = env.list("DJANGO__ALLOWED_HOSTS", default=[])

# Разрешаем Railway-домены всегда
# ALLOWED_HOSTS.extend([".up.railway.app", "parserhelppointforvictims-production.up.railway.app"])

if DEBUG:
    ALLOWED_HOSTS.extend(
        [
            "localhost",
            "0.0.0.0",
            "127.0.0.1",
        ]
    )

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
LOCAL_APPS = [
    "apps.user",
    "apps.base",
    "apps.project_functionality",
    "apps.celery_for_parser",
    "debug_toolbar",
]
THIRD_PARTY_APPS = [
    "crispy_forms",
    "crispy_bootstrap5",
    "django_celery_beat",
    "captcha",
]
INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

USE_EXTRA_MIDDLEWARES = env.bool("CUSTOM__USE_EXTRA_MIDDLEWARES", False)
if USE_EXTRA_MIDDLEWARES:
    MIDDLEWARE.extend(
        [
            "apps.middleware_loggers.middleware.RequestMiddleware",
        ]
    )

ROOT_URLCONF = "core.urls"
AUTH_USER_MODEL = "user.User"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [APPS_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

WSGI_APPLICATION = "core.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


# DATABASES = {
#     "default": env.db_url_config(
#         # f'sqlite:///{BASE_DIR.joinpath("db", "db.sqlite3")}'
#         # postgres://user:password@host:port/dbname
#         env.str(
#             "DJANGO__DB_URL",
#             f'postgres://{env.str("POSTGRES_USER")}:{env.str("POSTGRES_PASSWORD")}'
#             f'@{env.str("POSTGRES_HOST")}:{env.str("POSTGRES_PORT")}/{env.str("POSTGRES_DB")}',
#         )
#     )
# }

DATABASES = {
    "default": env.db_url_config(
        # Если есть DATABASE_URL (Railway) — используем её
        os.environ.get("DATABASE_URL")
        or
        # Иначе fallback на локальные переменные Docker Compose
        env.str(
            "DJANGO__DB_URL",
            f'postgres://{env.str("POSTGRES_USER")}:{env.str("POSTGRES_PASSWORD")}'
            f'@{env.str("POSTGRES_HOST")}:{env.str("POSTGRES_PORT")}/{env.str("POSTGRES_DB")}',
        )
    )
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"
STATICFILES_DIRS = [
    APPS_DIR / "static",
]

MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = "root:index"
LOGOUT_REDIRECT_URL = "root:index"

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
# SESSION_SAVE_EVERY_REQUEST = True


CELERY_BROKER_URL = env.str("CELERY_BROKER_URL")

CELERY_BEAT_SCHEDULE = {
    "test_task": {
        "task": "apps.celery_for_parser.tasks.refresh_help_points_task.refresh_help_points_task",  # путь к задаче
        # "schedule": crontab(minute="*/1"),  # every minute
        "schedule": crontab(hour="8", minute="0"),
    },
}

CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_BROKER_CONNECTION_MAX_RETRIES = 3
CELERY_BROKER_CONNECTION_RETRY_DELAY = 5

# INTERNAL_IPS = [
#     "127.0.0.1",
# ]
INTERNAL_IPS = [
    "127.0.0.1",  # Локальный IP
    "192.168.1.108",  # Ваш основной локальный IP
    "172.22.0.1",  # Docker-сеть
    "172.21.0.1",
    "172.20.0.1",
    "172.18.0.1",
    "172.17.0.1",
    "172.19.0.1",
]


# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "handlers": {
#         "console": {
#             "class": "logging.StreamHandler",
#         },
#     },
#     "root": {
#         "handlers": ["console"],
#         "level": "WARNING",
#     },
#     "loggers": {
#         "django": {
#             "handlers": ["console"],
#             # "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
#             "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
#             "propagate": False,
#         },
#     },
# }


DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": lambda request: True,  # для всех запросов
}
